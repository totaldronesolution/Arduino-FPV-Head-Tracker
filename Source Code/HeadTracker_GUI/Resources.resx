<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="CalWiz0" xml:space="preserve">
    <value>Welcome to the head tracker calibration wizard! To calibrate, simply place your tracker in the position shown in each picture, and click next. Click next now to discard your existing calibration and get started.</value>
  </data>
  <data name="CalWiz1" xml:space="preserve">
    <value>Place the tracker as shown in the picture. The IMU components should face up, and the USB cable should be to the left. Once positioned, hold tracker very still and click next.</value>
  </data>
  <data name="CalWiz2" xml:space="preserve">
    <value>Turn the tracker 180 degrees. The IMU components should face up, and the USB cable should be to the right. Click next once positioned.</value>
  </data>
  <data name="CalWiz3" xml:space="preserve">
    <value>With the USB cable on the left, tilt the tracker forward 90 degrees from level so that the IMU components are facing away from you. Click next once positioned.</value>
  </data>
  <data name="CalWiz4" xml:space="preserve">
    <value>With the USB cable on the left, tilt the tracker backward 90 degrees from level so that the IMU components are facing toward you. Click next once positioned.</value>
  </data>
  <data name="CalWiz5" xml:space="preserve">
    <value>Roll the tracker to the right 90 degrees from level, so that the IMU components are facing to your right, and the USB cable is on the top. Click next once positioned.</value>
  </data>
  <data name="CalWiz6" xml:space="preserve">
    <value>Roll the tracker to the left 90 degrees from level, so that the IMU components are facing to your left, and the USB cable is on the bottom. Click next once positioned.</value>
  </data>
  <data name="CalWiz7" xml:space="preserve">
    <value>With the USB cable on the left, turn the tracker upside down so that the IMU components are facing down. Click next once positioned.</value>
  </data>
  <data name="CalWiz8" xml:space="preserve">
    <value>You are now ready to store the calibration offsets. Click next to store the results to the tracker.</value>
  </data>
  <data name="CalWiz9" xml:space="preserve">
    <value>Calibration complete!</value>
  </data>
  <data name="CalWizTracking0" xml:space="preserve">
    <value>Welcome to the head tracker calibration wizard! During calibration, you will slowly and smoothely rotate the tracker in a full 360 circle around the specified axis. Click next now to discard your existing calibration and get started.</value>
  </data>
  <data name="CalWizTracking1" xml:space="preserve">
    <value>Start by placing the tracker down on a table with the IMU components facing up as shown in the picture. Hold the tracker still, then press next.</value>
  </data>
  <data name="CalWizTracking2" xml:space="preserve">
    <value>Now slowly and steadily rotate the tracker in a full 360 degree circle around the pan axis, as shown. When complete, press next.</value>
  </data>
  <data name="CalWizTracking3" xml:space="preserve">
    <value>Now slowly and steadily rotate the tracker in a full 360 degree circle around the tilt axis, as shown. When complete, press next.</value>
  </data>
  <data name="CalWizTracking4" xml:space="preserve">
    <value>Now slowly and steadily rotate the tracker in a full 360 degree circle around the roll axis, as shown. When complete, press next.</value>
  </data>
  <data name="CalWizTracking5" xml:space="preserve">
    <value>You are now ready to store the calibration offsets. Click next to store the results to the tracker.</value>
  </data>
  <data name="CalWizTracking6" xml:space="preserve">
    <value>Calibration complete!</value>
  </data>
  <assembly alias="System.Windows.Forms" name="System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
  <data name="Position1" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>Position1.jpg;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="Position2" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>Position2.jpg;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="Position2MinMax" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>Position2MinMax.jpg;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="Position3" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>Position3.jpg;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="Position3MinMax" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>Position3MinMax.jpg;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="Position4" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>Position4.jpg;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="Position4MinMax" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>Position4MinMax.jpg;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="Position5" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>Position5.jpg;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="Position6" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>Position6.jpg;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="Position7" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>Position7.jpg;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
</root>